@Library('Shared-Library')_
pipeline {
    agent any
    
    environment {
        imageName   		    = 'ramy282/grad-project'     	         // DockerHub repo/image name.
        dockerHubCredentialsID	    = 'DockerHub'  		    		// DockerHub credentials ID.
	openshiftCredentialsID	    = 'oc-token'		         	// service account token credentials ID
	openshiftClusterURL	    = 'https://api.ocp-training.ivolve-test.com:6443'
	openshiftProject            = 'ramyanwar'
	gitRepoName 	            = 'MultiCloudDevOpsProject'
        gitUserName 	            = 'ramy282'
	gitUserEmail                = 'ramyanwar282@gmail.com'
	githubToken                 = 'github-token'
	sonarTokenCredentialsID     = 'sonar-token'
        SCANNER_HOME           = tool 'sonar-scanner'
        


    }
    stages {
        
        stage('Run Unit Test') {
            steps {
                script {
                	
                		runUnitTests()
            		
        	   }
    	    }
	    }

        stage('Run SonarQube Analysis') {
            steps {
                script {
                    	
                    		sonarQubeAnalysis()
                    	
                    }
                }
            }

        
        stage('Build & Push Docker Image') {
            steps {
                script {
                    
                        buildandPushDockerImage(dockerHubCredentialsID, imageName, BUILD_NUMBER)
                    
                }
            }
        }

        stage('Deploy on OpenShift Cluster') {
            steps {
                script {
                        dir('openshift') {
                        deployOnOC(openshiftCredentialsID, openshiftClusterURL, openshiftProject, imageName, BUILD_NUMBER)
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
            cleanWs() // Clean workspace after the build is finished
        }
        success {
            echo "${JOB_NAME}-${BUILD_NUMBER} pipeline succeeded"
        }
        failure {
            echo "${JOB_NAME}-${BUILD_NUMBER} pipeline failed"
        }
    }
}
